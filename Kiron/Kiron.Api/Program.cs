// <auto-generated/>
using System.Text;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using Kiron.Api; // root namespace

var builder = WebApplication.CreateBuilder(args);

// Bind JwtSettings
var jwtSection = builder.Configuration.GetSection("JwtSettings");
var jwtKey = jwtSection["Key"] ?? "PLEASE_REPLACE_ME_WITH_A_LONG_RANDOM_KEY";
var jwtIssuer = jwtSection["Issuer"] ?? "Kiron";
var jwtAudience = jwtSection["Audience"] ?? "KironUsers";

// Services
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo { Title = "Kiron API", Version = "v1" });
    // JWT security scheme
    var securityScheme = new OpenApiSecurityScheme
    {
        Name = "Authorization",
        Type = SecuritySchemeType.Http,
        Scheme = "bearer",
        BearerFormat = "JWT",
        In = ParameterLocation.Header,
        Description = "JWT Authorization header using the Bearer scheme."
    };
    c.AddSecurityDefinition("Bearer", securityScheme);
    c.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme { Reference = new OpenApiReference { Type = ReferenceType.SecurityScheme, Id = "Bearer" } },
            new string[] {}
        }
    });
});

builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAll", p =>
        p.AllowAnyHeader().AllowAnyMethod().AllowAnyOrigin());
});

builder.Services.AddMemoryCache();

// Authentication
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateIssuerSigningKey = true,
            ValidateLifetime = true,
            ValidIssuer = jwtIssuer,
            ValidAudience = jwtAudience,
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtKey))
        };
    });

// ---- Dependency Injection: concrete implementations will be included in other chunks ----
// builder.Services.AddSingleton<IClock, SystemClock>();
// builder.Services.AddScoped<IDatabaseService, DatabaseService>();
// builder.Services.AddScoped<IAuthService, AuthService>();
// builder.Services.AddScoped<INavigationService, NavigationService>();
// builder.Services.AddScoped<IBankHolidayService, BankHolidayService>();
// builder.Services.AddScoped<IDragonBallService, DragonBallService>();
// builder.Services.AddScoped<ICacheService, MemoryCacheService>();

var app = builder.Build();

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseCors("AllowAll");
app.UseAuthentication();
app.UseAuthorization();
app.MapControllers();

app.Run();
